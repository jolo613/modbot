const {MessageEmbed, MessageButton, MessageActionRow} = require("discord.js");
const api = require("../../api/index");
const con = require("../../database");

const config = require("../../config.json");

const command = {
    data: {
        name: 'archive'
        , description: 'Create or edit Archive submissions!'
        , options: [
            {
                type: 1,
                name: "create",
                description: "Create a new Archive submission",
            },
            {
                type: 1,
                name: "edit",
                description: "Edit an Archive submission",
            },
            {
                type: 1,
                name: "delete",
                description: "Delete an Archive submission",
            }
        ]
    },
    execute(interaction) {
        let subcommand = interaction.options.getSubcommand();

        if (subcommand === "create") {
            api.Discord.getUserById(interaction.member.id).then(user => {
                if (user.identity?.id) {
                    con.query("select * from archive__create where owner_id = ?;", user.identity.id, (err, res) => {
                        if (err) {
                            interaction.error(err);
                            return;
                        }

                        if (res.length > 0) {
                            interaction.error("You already have a serious ban archive submission open!");
                        }

                        interaction.channel.threads.create({
                            type: config.developer ? 'GUILD_PUBLIC_THREAD' : 'GUILD_PRIVATE_THREAD',
                            name: 'sbs-' + user.name.toLowerCase(),
                            autoArchiveDuration: 60,
                            reason: 'Command prompts for Serious Ban Reports. Generated by ' + user.id,
                        }).then(thread => {
                            thread.members.add(interaction.member).then(() => {
                                interaction.success("We've created a thread to start the archive submission process!");

                                const embed = new MessageEmbed()
                                    .setTitle("We'll walk you through the process!")
                                    .setDescription("Please type the user's Twitch name or Twitch ID.")
                                    .setFooter({text: "Utilize new lines to search for multiple users"})
                                    .setColor(0xa970ff);
                                    

                                const prevStep = new MessageButton()
                                    .setLabel("Previous Step")
                                    .setCustomId("sbs-prev")
                                    .setStyle("SECONDARY")
                                    .setDisabled(true);

                                const nextStep = new MessageButton()
                                    .setLabel("Next Step")
                                    .setCustomId("sbs-next")
                                    .setStyle("PRIMARY");

                                const row = new MessageActionRow()
                                    .addComponents(prevStep, nextStep);

                                thread.send({content: ' ', embeds: [embed], components: [row]}).then(message => {
                                    con.query("insert into archive__create (channel_id, owner_id, thread_id, message_id) values (?, ?, ?, ?);", [interaction.channel.id, user.id, thread.id, message.id], err => {
                                        if (err) {
                                            console.error(err);
                                            thread.delete("Unknown SQL error");
                                            return;
                                        }
                                    });
                                }, err => {
                                    console.error(err);
                                    thread.delete("Failed to send starting message.");
                                });
                            }, err => {
                                console.error(err);
                                thread.delete("Failed to add member to thread.");
                                interaction.error("Failed to add member to thread.");
                            });
                        }, err => {
                            console.error(err);
                            interaction.error("Unable to create a thread in this channel.");
                        });
                    });
                } else {
                    interaction.error({content: "Your account isn't properly linked to TMS. Contact <@267380687345025025>", ephemeral: true});
                }
            }, error => {
                interaction.error(error);
            });
        } else if (subcommand === "edit") {
            interaction.error("Not yet implemented!");
        } else if (subcommand === "delete") {
            interaction.error("Not yet implemented!");
        }
    }
};

module.exports = command;